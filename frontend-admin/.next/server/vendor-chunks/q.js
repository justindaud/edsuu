"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/q";
exports.ids = ["vendor-chunks/q"];
exports.modules = {

/***/ "(rsc)/../node_modules/q/q.js":
/*!******************************!*\
  !*** ../node_modules/q/q.js ***!
  \******************************/
/***/ ((module) => {

eval("\n// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2017 Kris Kowal under the terms of the MIT\n * license found at https://github.com/kriskowal/q/blob/v1/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ (function(definition) {\n    \"use strict\";\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n    // CommonJS\n    } else if (true) {\n        module.exports = definition();\n    // RequireJS\n    } else { var previousQ, global; }\n})(function() {\n    \"use strict\";\n    var hasStacks = false;\n    try {\n        throw new Error();\n    } catch (e) {\n        hasStacks = !!e.stack;\n    }\n    // All code after this point will be filtered from stack traces reported\n    // by Q.\n    var qStartingLine = captureLine();\n    var qFileName;\n    // shims\n    // used for fallback in \"allResolved\"\n    var noop = function() {};\n    // Use the fastest possible means to execute a task in a future turn\n    // of the event loop.\n    var nextTick = function() {\n        // linked list of tasks (single, with head node)\n        var head = {\n            task: void 0,\n            next: null\n        };\n        var tail = head;\n        var flushing = false;\n        var requestTick = void 0;\n        var isNodeJS = false;\n        // queue for late tasks, used by unhandled rejection tracking\n        var laterQueue = [];\n        function flush() {\n            /* jshint loopfunc: true */ var task, domain;\n            while(head.next){\n                head = head.next;\n                task = head.task;\n                head.task = void 0;\n                domain = head.domain;\n                if (domain) {\n                    head.domain = void 0;\n                    domain.enter();\n                }\n                runSingle(task, domain);\n            }\n            while(laterQueue.length){\n                task = laterQueue.pop();\n                runSingle(task);\n            }\n            flushing = false;\n        }\n        // runs a single function in the async queue\n        function runSingle(task, domain) {\n            try {\n                task();\n            } catch (e) {\n                if (isNodeJS) {\n                    // In node, uncaught exceptions are considered fatal errors.\n                    // Re-throw them synchronously to interrupt flushing!\n                    // Ensure continuation if the uncaught exception is suppressed\n                    // listening \"uncaughtException\" events (as domains does).\n                    // Continue in next event to avoid tick recursion.\n                    if (domain) {\n                        domain.exit();\n                    }\n                    setTimeout(flush, 0);\n                    if (domain) {\n                        domain.enter();\n                    }\n                    throw e;\n                } else {\n                    // In browsers, uncaught exceptions are not fatal.\n                    // Re-throw them asynchronously to avoid slow-downs.\n                    setTimeout(function() {\n                        throw e;\n                    }, 0);\n                }\n            }\n            if (domain) {\n                domain.exit();\n            }\n        }\n        nextTick = function(task) {\n            tail = tail.next = {\n                task: task,\n                domain: isNodeJS && process.domain,\n                next: null\n            };\n            if (!flushing) {\n                flushing = true;\n                requestTick();\n            }\n        };\n        if (typeof process === \"object\" && process.toString() === \"[object process]\" && process.nextTick) {\n            // Ensure Q is in a real Node environment, with a `process.nextTick`.\n            // To see through fake Node environments:\n            // * Mocha test runner - exposes a `process` global without a `nextTick`\n            // * Browserify - exposes a `process.nexTick` function that uses\n            //   `setTimeout`. In this case `setImmediate` is preferred because\n            //    it is faster. Browserify's `process.toString()` yields\n            //   \"[object Object]\", while in a real Node environment\n            //   `process.toString()` yields \"[object process]\".\n            isNodeJS = true;\n            requestTick = function() {\n                process.nextTick(flush);\n            };\n        } else if (typeof setImmediate === \"function\") {\n            // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n            if (false) {} else {\n                requestTick = function() {\n                    setImmediate(flush);\n                };\n            }\n        } else if (typeof MessageChannel !== \"undefined\") {\n            // modern browsers\n            // http://www.nonblocking.io/2011/06/windownexttick.html\n            var channel = new MessageChannel();\n            // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n            // working message ports the first time a page loads.\n            channel.port1.onmessage = function() {\n                requestTick = requestPortTick;\n                channel.port1.onmessage = flush;\n                flush();\n            };\n            var requestPortTick = function() {\n                // Opera requires us to provide a message payload, regardless of\n                // whether we use it.\n                channel.port2.postMessage(0);\n            };\n            requestTick = function() {\n                setTimeout(flush, 0);\n                requestPortTick();\n            };\n        } else {\n            // old browsers\n            requestTick = function() {\n                setTimeout(flush, 0);\n            };\n        }\n        // runs a task after all other tasks have been run\n        // this is useful for unhandled rejection tracking that needs to happen\n        // after all `then`d tasks have been run.\n        nextTick.runAfter = function(task) {\n            laterQueue.push(task);\n            if (!flushing) {\n                flushing = true;\n                requestTick();\n            }\n        };\n        return nextTick;\n    }();\n    // Attempt to make generics safe in the face of downstream\n    // modifications.\n    // There is no situation where this is necessary.\n    // If you need a security guarantee, these primordials need to be\n    // deeply frozen anyway, and if you don’t need a security guarantee,\n    // this is just plain paranoid.\n    // However, this **might** have the nice side-effect of reducing the size of\n    // the minified code by reducing x.call() to merely x()\n    // See Mark Miller’s explanation of what this does.\n    // http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n    var call = Function.call;\n    function uncurryThis(f) {\n        return function() {\n            return call.apply(f, arguments);\n        };\n    }\n    // This is equivalent, but slower:\n    // uncurryThis = Function_bind.bind(Function_bind.call);\n    // http://jsperf.com/uncurrythis\n    var array_slice = uncurryThis(Array.prototype.slice);\n    var array_reduce = uncurryThis(Array.prototype.reduce || function(callback, basis) {\n        var index = 0, length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            }while (1);\n        }\n        // reduce\n        for(; index < length; index++){\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    });\n    var array_indexOf = uncurryThis(Array.prototype.indexOf || function(value) {\n        // not a very good shim, but good enough for our one use of it\n        for(var i = 0; i < this.length; i++){\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    });\n    var array_map = uncurryThis(Array.prototype.map || function(callback, thisp) {\n        var self1 = this;\n        var collect = [];\n        array_reduce(self1, function(undefined1, value, index) {\n            collect.push(callback.call(thisp, value, index, self1));\n        }, void 0);\n        return collect;\n    });\n    var object_create = Object.create || function(prototype) {\n        function Type() {}\n        Type.prototype = prototype;\n        return new Type();\n    };\n    var object_defineProperty = Object.defineProperty || function(obj, prop, descriptor) {\n        obj[prop] = descriptor.value;\n        return obj;\n    };\n    var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n    var object_keys = Object.keys || function(object) {\n        var keys = [];\n        for(var key in object){\n            if (object_hasOwnProperty(object, key)) {\n                keys.push(key);\n            }\n        }\n        return keys;\n    };\n    var object_toString = uncurryThis(Object.prototype.toString);\n    function isObject(value) {\n        return value === Object(value);\n    }\n    // generator related shims\n    // FIXME: Remove this function once ES6 generators are in SpiderMonkey.\n    function isStopIteration(exception) {\n        return object_toString(exception) === \"[object StopIteration]\" || exception instanceof QReturnValue;\n    }\n    // FIXME: Remove this helper and Q.return once ES6 generators are in\n    // SpiderMonkey.\n    var QReturnValue;\n    if (typeof ReturnValue !== \"undefined\") {\n        QReturnValue = ReturnValue;\n    } else {\n        QReturnValue = function(value) {\n            this.value = value;\n        };\n    }\n    // long stack traces\n    var STACK_JUMP_SEPARATOR = \"From previous event:\";\n    function makeStackTraceLong(error, promise) {\n        // If possible, transform the error stack trace by removing Node and Q\n        // cruft, then concatenating with the stack trace of `promise`. See #57.\n        if (hasStacks && promise.stack && typeof error === \"object\" && error !== null && error.stack) {\n            var stacks = [];\n            for(var p = promise; !!p; p = p.source){\n                if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {\n                    object_defineProperty(error, \"__minimumStackCounter__\", {\n                        value: p.stackCounter,\n                        configurable: true\n                    });\n                    stacks.unshift(p.stack);\n                }\n            }\n            stacks.unshift(error.stack);\n            var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n            var stack = filterStackString(concatedStacks);\n            object_defineProperty(error, \"stack\", {\n                value: stack,\n                configurable: true\n            });\n        }\n    }\n    function filterStackString(stackString) {\n        var lines = stackString.split(\"\\n\");\n        var desiredLines = [];\n        for(var i = 0; i < lines.length; ++i){\n            var line = lines[i];\n            if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n                desiredLines.push(line);\n            }\n        }\n        return desiredLines.join(\"\\n\");\n    }\n    function isNodeFrame(stackLine) {\n        return stackLine.indexOf(\"(module.js:\") !== -1 || stackLine.indexOf(\"(node.js:\") !== -1;\n    }\n    function getFileNameAndLineNumber(stackLine) {\n        // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n        // In IE10 function name can have spaces (\"Anonymous function\") O_o\n        var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n        if (attempt1) {\n            return [\n                attempt1[1],\n                Number(attempt1[2])\n            ];\n        }\n        // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n        var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n        if (attempt2) {\n            return [\n                attempt2[1],\n                Number(attempt2[2])\n            ];\n        }\n        // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n        var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n        if (attempt3) {\n            return [\n                attempt3[1],\n                Number(attempt3[2])\n            ];\n        }\n    }\n    function isInternalFrame(stackLine) {\n        var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n        if (!fileNameAndLineNumber) {\n            return false;\n        }\n        var fileName = fileNameAndLineNumber[0];\n        var lineNumber = fileNameAndLineNumber[1];\n        return fileName === qFileName && lineNumber >= qStartingLine && lineNumber <= qEndingLine;\n    }\n    // discover own file name and line number range for filtering stack\n    // traces\n    function captureLine() {\n        if (!hasStacks) {\n            return;\n        }\n        try {\n            throw new Error();\n        } catch (e) {\n            var lines = e.stack.split(\"\\n\");\n            var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n            var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n            if (!fileNameAndLineNumber) {\n                return;\n            }\n            qFileName = fileNameAndLineNumber[0];\n            return fileNameAndLineNumber[1];\n        }\n    }\n    function deprecate(callback, name, alternative) {\n        return function() {\n            if (typeof console !== \"undefined\" && typeof console.warn === \"function\") {\n                console.warn(name + \" is deprecated, use \" + alternative + \" instead.\", new Error(\"\").stack);\n            }\n            return callback.apply(callback, arguments);\n        };\n    }\n    // end of shims\n    // beginning of real work\n    /**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */ function Q(value) {\n        // If the object is already a Promise, return it directly.  This enables\n        // the resolve function to both be used to created references from objects,\n        // but to tolerably coerce non-promises to promises.\n        if (value instanceof Promise) {\n            return value;\n        }\n        // assimilate thenables\n        if (isPromiseAlike(value)) {\n            return coerce(value);\n        } else {\n            return fulfill(value);\n        }\n    }\n    Q.resolve = Q;\n    /**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */ Q.nextTick = nextTick;\n    /**\n * Controls whether or not long stack traces will be on\n */ Q.longStackSupport = false;\n    /**\n * The counter is used to determine the stopping point for building\n * long stack traces. In makeStackTraceLong we walk backwards through\n * the linked list of promises, only stacks which were created before\n * the rejection are concatenated.\n */ var longStackCounter = 1;\n    // enable long stacks if Q_DEBUG is set\n    if (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n        Q.longStackSupport = true;\n    }\n    /**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */ Q.defer = defer;\n    function defer() {\n        // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n        // been resolved.  If it is \"undefined\", it has been resolved.  Each\n        // element of the messages array is itself an array of complete arguments to\n        // forward to the resolved promise.  We coerce the resolution value to a\n        // promise using the `resolve` function because it handles both fully\n        // non-thenable values and other thenables gracefully.\n        var messages = [], progressListeners = [], resolvedPromise;\n        var deferred = object_create(defer.prototype);\n        var promise = object_create(Promise.prototype);\n        promise.promiseDispatch = function(resolve, op, operands) {\n            var args = array_slice(arguments);\n            if (messages) {\n                messages.push(args);\n                if (op === \"when\" && operands[1]) {\n                    progressListeners.push(operands[1]);\n                }\n            } else {\n                Q.nextTick(function() {\n                    resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n                });\n            }\n        };\n        // XXX deprecated\n        promise.valueOf = function() {\n            if (messages) {\n                return promise;\n            }\n            var nearerValue = nearer(resolvedPromise);\n            if (isPromise(nearerValue)) {\n                resolvedPromise = nearerValue; // shorten chain\n            }\n            return nearerValue;\n        };\n        promise.inspect = function() {\n            if (!resolvedPromise) {\n                return {\n                    state: \"pending\"\n                };\n            }\n            return resolvedPromise.inspect();\n        };\n        if (Q.longStackSupport && hasStacks) {\n            try {\n                throw new Error();\n            } catch (e) {\n                // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n                // accessor around; that causes memory leaks as per GH-111. Just\n                // reify the stack trace as a string ASAP.\n                //\n                // At the same time, cut off the first line; it's always just\n                // \"[object Promise]\\n\", as per the `toString`.\n                promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n                promise.stackCounter = longStackCounter++;\n            }\n        }\n        // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n        // consolidating them into `become`, since otherwise we'd create new\n        // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n        function become(newPromise) {\n            resolvedPromise = newPromise;\n            if (Q.longStackSupport && hasStacks) {\n                // Only hold a reference to the new promise if long stacks\n                // are enabled to reduce memory usage\n                promise.source = newPromise;\n            }\n            array_reduce(messages, function(undefined1, message) {\n                Q.nextTick(function() {\n                    newPromise.promiseDispatch.apply(newPromise, message);\n                });\n            }, void 0);\n            messages = void 0;\n            progressListeners = void 0;\n        }\n        deferred.promise = promise;\n        deferred.resolve = function(value) {\n            if (resolvedPromise) {\n                return;\n            }\n            become(Q(value));\n        };\n        deferred.fulfill = function(value) {\n            if (resolvedPromise) {\n                return;\n            }\n            become(fulfill(value));\n        };\n        deferred.reject = function(reason) {\n            if (resolvedPromise) {\n                return;\n            }\n            become(reject(reason));\n        };\n        deferred.notify = function(progress) {\n            if (resolvedPromise) {\n                return;\n            }\n            array_reduce(progressListeners, function(undefined1, progressListener) {\n                Q.nextTick(function() {\n                    progressListener(progress);\n                });\n            }, void 0);\n        };\n        return deferred;\n    }\n    /**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */ defer.prototype.makeNodeResolver = function() {\n        var self1 = this;\n        return function(error, value) {\n            if (error) {\n                self1.reject(error);\n            } else if (arguments.length > 2) {\n                self1.resolve(array_slice(arguments, 1));\n            } else {\n                self1.resolve(value);\n            }\n        };\n    };\n    /**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */ Q.Promise = promise; // ES6\n    Q.promise = promise;\n    function promise(resolver) {\n        if (typeof resolver !== \"function\") {\n            throw new TypeError(\"resolver must be a function.\");\n        }\n        var deferred = defer();\n        try {\n            resolver(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (reason) {\n            deferred.reject(reason);\n        }\n        return deferred.promise;\n    }\n    promise.race = race; // ES6\n    promise.all = all; // ES6\n    promise.reject = reject; // ES6\n    promise.resolve = Q; // ES6\n    // XXX experimental.  This method is a way to denote that a local value is\n    // serializable and should be immediately dispatched to a remote upon request,\n    // instead of passing a reference.\n    Q.passByCopy = function(object) {\n        //freeze(object);\n        //passByCopies.set(object, true);\n        return object;\n    };\n    Promise.prototype.passByCopy = function() {\n        //freeze(object);\n        //passByCopies.set(object, true);\n        return this;\n    };\n    /**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */ Q.join = function(x, y) {\n        return Q(x).join(y);\n    };\n    Promise.prototype.join = function(that) {\n        return Q([\n            this,\n            that\n        ]).spread(function(x, y) {\n            if (x === y) {\n                // TODO: \"===\" should be Object.is or equiv\n                return x;\n            } else {\n                throw new Error(\"Q can't join: not the same: \" + x + \" \" + y);\n            }\n        });\n    };\n    /**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */ Q.race = race;\n    function race(answerPs) {\n        return promise(function(resolve, reject) {\n            // Switch to this once we can assume at least ES5\n            // answerPs.forEach(function (answerP) {\n            //     Q(answerP).then(resolve, reject);\n            // });\n            // Use this in the meantime\n            for(var i = 0, len = answerPs.length; i < len; i++){\n                Q(answerPs[i]).then(resolve, reject);\n            }\n        });\n    }\n    Promise.prototype.race = function() {\n        return this.then(Q.race);\n    };\n    /**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */ Q.makePromise = Promise;\n    function Promise(descriptor, fallback, inspect) {\n        if (fallback === void 0) {\n            fallback = function(op) {\n                return reject(new Error(\"Promise does not support operation: \" + op));\n            };\n        }\n        if (inspect === void 0) {\n            inspect = function() {\n                return {\n                    state: \"unknown\"\n                };\n            };\n        }\n        var promise = object_create(Promise.prototype);\n        promise.promiseDispatch = function(resolve, op, args) {\n            var result;\n            try {\n                if (descriptor[op]) {\n                    result = descriptor[op].apply(promise, args);\n                } else {\n                    result = fallback.call(promise, op, args);\n                }\n            } catch (exception) {\n                result = reject(exception);\n            }\n            if (resolve) {\n                resolve(result);\n            }\n        };\n        promise.inspect = inspect;\n        // XXX deprecated `valueOf` and `exception` support\n        if (inspect) {\n            var inspected = inspect();\n            if (inspected.state === \"rejected\") {\n                promise.exception = inspected.reason;\n            }\n            promise.valueOf = function() {\n                var inspected = inspect();\n                if (inspected.state === \"pending\" || inspected.state === \"rejected\") {\n                    return promise;\n                }\n                return inspected.value;\n            };\n        }\n        return promise;\n    }\n    Promise.prototype.toString = function() {\n        return \"[object Promise]\";\n    };\n    Promise.prototype.then = function(fulfilled, rejected, progressed) {\n        var self1 = this;\n        var deferred = defer();\n        var done = false; // ensure the untrusted promise makes at most a\n        // single call to one of the callbacks\n        function _fulfilled(value) {\n            try {\n                return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n            } catch (exception) {\n                return reject(exception);\n            }\n        }\n        function _rejected(exception) {\n            if (typeof rejected === \"function\") {\n                makeStackTraceLong(exception, self1);\n                try {\n                    return rejected(exception);\n                } catch (newException) {\n                    return reject(newException);\n                }\n            }\n            return reject(exception);\n        }\n        function _progressed(value) {\n            return typeof progressed === \"function\" ? progressed(value) : value;\n        }\n        Q.nextTick(function() {\n            self1.promiseDispatch(function(value) {\n                if (done) {\n                    return;\n                }\n                done = true;\n                deferred.resolve(_fulfilled(value));\n            }, \"when\", [\n                function(exception) {\n                    if (done) {\n                        return;\n                    }\n                    done = true;\n                    deferred.resolve(_rejected(exception));\n                }\n            ]);\n        });\n        // Progress propagator need to be attached in the current tick.\n        self1.promiseDispatch(void 0, \"when\", [\n            void 0,\n            function(value) {\n                var newValue;\n                var threw = false;\n                try {\n                    newValue = _progressed(value);\n                } catch (e) {\n                    threw = true;\n                    if (Q.onerror) {\n                        Q.onerror(e);\n                    } else {\n                        throw e;\n                    }\n                }\n                if (!threw) {\n                    deferred.notify(newValue);\n                }\n            }\n        ]);\n        return deferred.promise;\n    };\n    Q.tap = function(promise, callback) {\n        return Q(promise).tap(callback);\n    };\n    /**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */ Promise.prototype.tap = function(callback) {\n        callback = Q(callback);\n        return this.then(function(value) {\n            return callback.fcall(value).thenResolve(value);\n        });\n    };\n    /**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */ Q.when = when;\n    function when(value, fulfilled, rejected, progressed) {\n        return Q(value).then(fulfilled, rejected, progressed);\n    }\n    Promise.prototype.thenResolve = function(value) {\n        return this.then(function() {\n            return value;\n        });\n    };\n    Q.thenResolve = function(promise, value) {\n        return Q(promise).thenResolve(value);\n    };\n    Promise.prototype.thenReject = function(reason) {\n        return this.then(function() {\n            throw reason;\n        });\n    };\n    Q.thenReject = function(promise, reason) {\n        return Q(promise).thenReject(reason);\n    };\n    /**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */ // XXX should we re-do this?\n    Q.nearer = nearer;\n    function nearer(value) {\n        if (isPromise(value)) {\n            var inspected = value.inspect();\n            if (inspected.state === \"fulfilled\") {\n                return inspected.value;\n            }\n        }\n        return value;\n    }\n    /**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */ Q.isPromise = isPromise;\n    function isPromise(object) {\n        return object instanceof Promise;\n    }\n    Q.isPromiseAlike = isPromiseAlike;\n    function isPromiseAlike(object) {\n        return isObject(object) && typeof object.then === \"function\";\n    }\n    /**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */ Q.isPending = isPending;\n    function isPending(object) {\n        return isPromise(object) && object.inspect().state === \"pending\";\n    }\n    Promise.prototype.isPending = function() {\n        return this.inspect().state === \"pending\";\n    };\n    /**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */ Q.isFulfilled = isFulfilled;\n    function isFulfilled(object) {\n        return !isPromise(object) || object.inspect().state === \"fulfilled\";\n    }\n    Promise.prototype.isFulfilled = function() {\n        return this.inspect().state === \"fulfilled\";\n    };\n    /**\n * @returns whether the given object is a rejected promise.\n */ Q.isRejected = isRejected;\n    function isRejected(object) {\n        return isPromise(object) && object.inspect().state === \"rejected\";\n    }\n    Promise.prototype.isRejected = function() {\n        return this.inspect().state === \"rejected\";\n    };\n    //// BEGIN UNHANDLED REJECTION TRACKING\n    // This promise library consumes exceptions thrown in handlers so they can be\n    // handled by a subsequent promise.  The exceptions get added to this array when\n    // they are created, and removed when they are handled.  Note that in ES6 or\n    // shimmed environments, this would naturally be a `Set`.\n    var unhandledReasons = [];\n    var unhandledRejections = [];\n    var reportedUnhandledRejections = [];\n    var trackUnhandledRejections = true;\n    function resetUnhandledRejections() {\n        unhandledReasons.length = 0;\n        unhandledRejections.length = 0;\n        if (!trackUnhandledRejections) {\n            trackUnhandledRejections = true;\n        }\n    }\n    function trackRejection(promise, reason) {\n        if (!trackUnhandledRejections) {\n            return;\n        }\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function() {\n                if (array_indexOf(unhandledRejections, promise) !== -1) {\n                    process.emit(\"unhandledRejection\", reason, promise);\n                    reportedUnhandledRejections.push(promise);\n                }\n            });\n        }\n        unhandledRejections.push(promise);\n        if (reason && typeof reason.stack !== \"undefined\") {\n            unhandledReasons.push(reason.stack);\n        } else {\n            unhandledReasons.push(\"(no stack) \" + reason);\n        }\n    }\n    function untrackRejection(promise) {\n        if (!trackUnhandledRejections) {\n            return;\n        }\n        var at = array_indexOf(unhandledRejections, promise);\n        if (at !== -1) {\n            if (typeof process === \"object\" && typeof process.emit === \"function\") {\n                Q.nextTick.runAfter(function() {\n                    var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                    if (atReport !== -1) {\n                        process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                        reportedUnhandledRejections.splice(atReport, 1);\n                    }\n                });\n            }\n            unhandledRejections.splice(at, 1);\n            unhandledReasons.splice(at, 1);\n        }\n    }\n    Q.resetUnhandledRejections = resetUnhandledRejections;\n    Q.getUnhandledReasons = function() {\n        // Make a copy so that consumers can't interfere with our internal state.\n        return unhandledReasons.slice();\n    };\n    Q.stopUnhandledRejectionTracking = function() {\n        resetUnhandledRejections();\n        trackUnhandledRejections = false;\n    };\n    resetUnhandledRejections();\n    //// END UNHANDLED REJECTION TRACKING\n    /**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */ Q.reject = reject;\n    function reject(reason) {\n        var rejection = Promise({\n            \"when\": function(rejected) {\n                // note that the error has been handled\n                if (rejected) {\n                    untrackRejection(this);\n                }\n                return rejected ? rejected(reason) : this;\n            }\n        }, function fallback() {\n            return this;\n        }, function inspect() {\n            return {\n                state: \"rejected\",\n                reason: reason\n            };\n        });\n        // Note that the reason has not been handled.\n        trackRejection(rejection, reason);\n        return rejection;\n    }\n    /**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */ Q.fulfill = fulfill;\n    function fulfill(value) {\n        return Promise({\n            \"when\": function() {\n                return value;\n            },\n            \"get\": function(name) {\n                return value[name];\n            },\n            \"set\": function(name, rhs) {\n                value[name] = rhs;\n            },\n            \"delete\": function(name) {\n                delete value[name];\n            },\n            \"post\": function(name, args) {\n                // Mark Miller proposes that post with no name should apply a\n                // promised function.\n                if (name === null || name === void 0) {\n                    return value.apply(void 0, args);\n                } else {\n                    return value[name].apply(value, args);\n                }\n            },\n            \"apply\": function(thisp, args) {\n                return value.apply(thisp, args);\n            },\n            \"keys\": function() {\n                return object_keys(value);\n            }\n        }, void 0, function inspect() {\n            return {\n                state: \"fulfilled\",\n                value: value\n            };\n        });\n    }\n    /**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */ function coerce(promise) {\n        var deferred = defer();\n        Q.nextTick(function() {\n            try {\n                promise.then(deferred.resolve, deferred.reject, deferred.notify);\n            } catch (exception) {\n                deferred.reject(exception);\n            }\n        });\n        return deferred.promise;\n    }\n    /**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */ Q.master = master;\n    function master(object) {\n        return Promise({\n            \"isDef\": function() {}\n        }, function fallback(op, args) {\n            return dispatch(object, op, args);\n        }, function() {\n            return Q(object).inspect();\n        });\n    }\n    /**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */ Q.spread = spread;\n    function spread(value, fulfilled, rejected) {\n        return Q(value).spread(fulfilled, rejected);\n    }\n    Promise.prototype.spread = function(fulfilled, rejected) {\n        return this.all().then(function(array) {\n            return fulfilled.apply(void 0, array);\n        }, rejected);\n    };\n    /**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */ Q.async = async;\n    function async(makeGenerator) {\n        return function() {\n            // when verb is \"send\", arg is a value\n            // when verb is \"throw\", arg is an exception\n            function continuer(verb, arg) {\n                var result;\n                // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n                // engine that has a deployed base of browsers that support generators.\n                // However, SM's generators use the Python-inspired semantics of\n                // outdated ES6 drafts.  We would like to support ES6, but we'd also\n                // like to make it possible to use generators in deployed browsers, so\n                // we also support Python-style generators.  At some point we can remove\n                // this block.\n                if (typeof StopIteration === \"undefined\") {\n                    // ES6 Generators\n                    try {\n                        result = generator[verb](arg);\n                    } catch (exception) {\n                        return reject(exception);\n                    }\n                    if (result.done) {\n                        return Q(result.value);\n                    } else {\n                        return when(result.value, callback, errback);\n                    }\n                } else {\n                    // SpiderMonkey Generators\n                    // FIXME: Remove this case when SM does ES6 generators.\n                    try {\n                        result = generator[verb](arg);\n                    } catch (exception) {\n                        if (isStopIteration(exception)) {\n                            return Q(exception.value);\n                        } else {\n                            return reject(exception);\n                        }\n                    }\n                    return when(result, callback, errback);\n                }\n            }\n            var generator = makeGenerator.apply(this, arguments);\n            var callback = continuer.bind(continuer, \"next\");\n            var errback = continuer.bind(continuer, \"throw\");\n            return callback();\n        };\n    }\n    /**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */ Q.spawn = spawn;\n    function spawn(makeGenerator) {\n        Q.done(Q.async(makeGenerator)());\n    }\n    // FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n    /**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */ Q[\"return\"] = _return;\n    function _return(value) {\n        throw new QReturnValue(value);\n    }\n    /**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */ Q.promised = promised;\n    function promised(callback) {\n        return function() {\n            return spread([\n                this,\n                all(arguments)\n            ], function(self1, args) {\n                return callback.apply(self1, args);\n            });\n        };\n    }\n    /**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */ Q.dispatch = dispatch;\n    function dispatch(object, op, args) {\n        return Q(object).dispatch(op, args);\n    }\n    Promise.prototype.dispatch = function(op, args) {\n        var self1 = this;\n        var deferred = defer();\n        Q.nextTick(function() {\n            self1.promiseDispatch(deferred.resolve, op, args);\n        });\n        return deferred.promise;\n    };\n    /**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */ Q.get = function(object, key) {\n        return Q(object).dispatch(\"get\", [\n            key\n        ]);\n    };\n    Promise.prototype.get = function(key) {\n        return this.dispatch(\"get\", [\n            key\n        ]);\n    };\n    /**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */ Q.set = function(object, key, value) {\n        return Q(object).dispatch(\"set\", [\n            key,\n            value\n        ]);\n    };\n    Promise.prototype.set = function(key, value) {\n        return this.dispatch(\"set\", [\n            key,\n            value\n        ]);\n    };\n    /**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */ Q.del = Q[\"delete\"] = function(object, key) {\n        return Q(object).dispatch(\"delete\", [\n            key\n        ]);\n    };\n    Promise.prototype.del = Promise.prototype[\"delete\"] = function(key) {\n        return this.dispatch(\"delete\", [\n            key\n        ]);\n    };\n    /**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */ // bound locally because it is used by other methods\n    Q.mapply = Q.post = function(object, name, args) {\n        return Q(object).dispatch(\"post\", [\n            name,\n            args\n        ]);\n    };\n    Promise.prototype.mapply = Promise.prototype.post = function(name, args) {\n        return this.dispatch(\"post\", [\n            name,\n            args\n        ]);\n    };\n    /**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */ Q.send = Q.mcall = Q.invoke = function(object, name /*...args*/ ) {\n        return Q(object).dispatch(\"post\", [\n            name,\n            array_slice(arguments, 2)\n        ]);\n    };\n    Promise.prototype.send = Promise.prototype.mcall = Promise.prototype.invoke = function(name /*...args*/ ) {\n        return this.dispatch(\"post\", [\n            name,\n            array_slice(arguments, 1)\n        ]);\n    };\n    /**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */ Q.fapply = function(object, args) {\n        return Q(object).dispatch(\"apply\", [\n            void 0,\n            args\n        ]);\n    };\n    Promise.prototype.fapply = function(args) {\n        return this.dispatch(\"apply\", [\n            void 0,\n            args\n        ]);\n    };\n    /**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */ Q[\"try\"] = Q.fcall = function(object /* ...args*/ ) {\n        return Q(object).dispatch(\"apply\", [\n            void 0,\n            array_slice(arguments, 1)\n        ]);\n    };\n    Promise.prototype.fcall = function() {\n        return this.dispatch(\"apply\", [\n            void 0,\n            array_slice(arguments)\n        ]);\n    };\n    /**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */ Q.fbind = function(object /*...args*/ ) {\n        var promise = Q(object);\n        var args = array_slice(arguments, 1);\n        return function fbound() {\n            return promise.dispatch(\"apply\", [\n                this,\n                args.concat(array_slice(arguments))\n            ]);\n        };\n    };\n    Promise.prototype.fbind = function() {\n        var promise = this;\n        var args = array_slice(arguments);\n        return function fbound() {\n            return promise.dispatch(\"apply\", [\n                this,\n                args.concat(array_slice(arguments))\n            ]);\n        };\n    };\n    /**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */ Q.keys = function(object) {\n        return Q(object).dispatch(\"keys\", []);\n    };\n    Promise.prototype.keys = function() {\n        return this.dispatch(\"keys\", []);\n    };\n    /**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */ // By Mark Miller\n    // http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\n    Q.all = all;\n    function all(promises) {\n        return when(promises, function(promises) {\n            var pendingCount = 0;\n            var deferred = defer();\n            array_reduce(promises, function(undefined1, promise, index) {\n                var snapshot;\n                if (isPromise(promise) && (snapshot = promise.inspect()).state === \"fulfilled\") {\n                    promises[index] = snapshot.value;\n                } else {\n                    ++pendingCount;\n                    when(promise, function(value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    }, deferred.reject, function(progress) {\n                        deferred.notify({\n                            index: index,\n                            value: progress\n                        });\n                    });\n                }\n            }, void 0);\n            if (pendingCount === 0) {\n                deferred.resolve(promises);\n            }\n            return deferred.promise;\n        });\n    }\n    Promise.prototype.all = function() {\n        return all(this);\n    };\n    /**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */ Q.any = any;\n    function any(promises) {\n        if (promises.length === 0) {\n            return Q.resolve();\n        }\n        var deferred = Q.defer();\n        var pendingCount = 0;\n        array_reduce(promises, function(prev, current, index) {\n            var promise = promises[index];\n            pendingCount++;\n            when(promise, onFulfilled, onRejected, onProgress);\n            function onFulfilled(result) {\n                deferred.resolve(result);\n            }\n            function onRejected(err) {\n                pendingCount--;\n                if (pendingCount === 0) {\n                    var rejection = err || new Error(\"\" + err);\n                    rejection.message = \"Q can't get fulfillment value from any promise, all \" + \"promises were rejected. Last error message: \" + rejection.message;\n                    deferred.reject(rejection);\n                }\n            }\n            function onProgress(progress) {\n                deferred.notify({\n                    index: index,\n                    value: progress\n                });\n            }\n        }, undefined);\n        return deferred.promise;\n    }\n    Promise.prototype.any = function() {\n        return any(this);\n    };\n    /**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */ Q.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\n    function allResolved(promises) {\n        return when(promises, function(promises) {\n            promises = array_map(promises, Q);\n            return when(all(array_map(promises, function(promise) {\n                return when(promise, noop, noop);\n            })), function() {\n                return promises;\n            });\n        });\n    }\n    Promise.prototype.allResolved = function() {\n        return allResolved(this);\n    };\n    /**\n * @see Promise#allSettled\n */ Q.allSettled = allSettled;\n    function allSettled(promises) {\n        return Q(promises).allSettled();\n    }\n    /**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */ Promise.prototype.allSettled = function() {\n        return this.then(function(promises) {\n            return all(array_map(promises, function(promise) {\n                promise = Q(promise);\n                function regardless() {\n                    return promise.inspect();\n                }\n                return promise.then(regardless, regardless);\n            }));\n        });\n    };\n    /**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */ Q.fail = Q[\"catch\"] = function(object, rejected) {\n        return Q(object).then(void 0, rejected);\n    };\n    Promise.prototype.fail = Promise.prototype[\"catch\"] = function(rejected) {\n        return this.then(void 0, rejected);\n    };\n    /**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */ Q.progress = progress;\n    function progress(object, progressed) {\n        return Q(object).then(void 0, void 0, progressed);\n    }\n    Promise.prototype.progress = function(progressed) {\n        return this.then(void 0, void 0, progressed);\n    };\n    /**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */ Q.fin = Q[\"finally\"] = function(object, callback) {\n        return Q(object)[\"finally\"](callback);\n    };\n    Promise.prototype.fin = Promise.prototype[\"finally\"] = function(callback) {\n        if (!callback || typeof callback.apply !== \"function\") {\n            throw new Error(\"Q can't apply finally callback\");\n        }\n        callback = Q(callback);\n        return this.then(function(value) {\n            return callback.fcall().then(function() {\n                return value;\n            });\n        }, function(reason) {\n            // TODO attempt to recycle the rejection with \"this\".\n            return callback.fcall().then(function() {\n                throw reason;\n            });\n        });\n    };\n    /**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */ Q.done = function(object, fulfilled, rejected, progress) {\n        return Q(object).done(fulfilled, rejected, progress);\n    };\n    Promise.prototype.done = function(fulfilled, rejected, progress) {\n        var onUnhandledError = function(error) {\n            // forward to a future turn so that ``when``\n            // does not catch it and turn it into a rejection.\n            Q.nextTick(function() {\n                makeStackTraceLong(error, promise);\n                if (Q.onerror) {\n                    Q.onerror(error);\n                } else {\n                    throw error;\n                }\n            });\n        };\n        // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n        var promise = fulfilled || rejected || progress ? this.then(fulfilled, rejected, progress) : this;\n        if (typeof process === \"object\" && process && process.domain) {\n            onUnhandledError = process.domain.bind(onUnhandledError);\n        }\n        promise.then(void 0, onUnhandledError);\n    };\n    /**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */ Q.timeout = function(object, ms, error) {\n        return Q(object).timeout(ms, error);\n    };\n    Promise.prototype.timeout = function(ms, error) {\n        var deferred = defer();\n        var timeoutId = setTimeout(function() {\n            if (!error || \"string\" === typeof error) {\n                error = new Error(error || \"Timed out after \" + ms + \" ms\");\n                error.code = \"ETIMEDOUT\";\n            }\n            deferred.reject(error);\n        }, ms);\n        this.then(function(value) {\n            clearTimeout(timeoutId);\n            deferred.resolve(value);\n        }, function(exception) {\n            clearTimeout(timeoutId);\n            deferred.reject(exception);\n        }, deferred.notify);\n        return deferred.promise;\n    };\n    /**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */ Q.delay = function(object, timeout) {\n        if (timeout === void 0) {\n            timeout = object;\n            object = void 0;\n        }\n        return Q(object).delay(timeout);\n    };\n    Promise.prototype.delay = function(timeout) {\n        return this.then(function(value) {\n            var deferred = defer();\n            setTimeout(function() {\n                deferred.resolve(value);\n            }, timeout);\n            return deferred.promise;\n        });\n    };\n    /**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */ Q.nfapply = function(callback, args) {\n        return Q(callback).nfapply(args);\n    };\n    Promise.prototype.nfapply = function(args) {\n        var deferred = defer();\n        var nodeArgs = array_slice(args);\n        nodeArgs.push(deferred.makeNodeResolver());\n        this.fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n    /**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */ Q.nfcall = function(callback /*...args*/ ) {\n        var args = array_slice(arguments, 1);\n        return Q(callback).nfapply(args);\n    };\n    Promise.prototype.nfcall = function() {\n        var nodeArgs = array_slice(arguments);\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        this.fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n    /**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */ Q.nfbind = Q.denodeify = function(callback /*...args*/ ) {\n        if (callback === undefined) {\n            throw new Error(\"Q can't wrap an undefined function\");\n        }\n        var baseArgs = array_slice(arguments, 1);\n        return function() {\n            var nodeArgs = baseArgs.concat(array_slice(arguments));\n            var deferred = defer();\n            nodeArgs.push(deferred.makeNodeResolver());\n            Q(callback).fapply(nodeArgs).fail(deferred.reject);\n            return deferred.promise;\n        };\n    };\n    Promise.prototype.nfbind = Promise.prototype.denodeify = function() {\n        var args = array_slice(arguments);\n        args.unshift(this);\n        return Q.denodeify.apply(void 0, args);\n    };\n    Q.nbind = function(callback, thisp /*...args*/ ) {\n        var baseArgs = array_slice(arguments, 2);\n        return function() {\n            var nodeArgs = baseArgs.concat(array_slice(arguments));\n            var deferred = defer();\n            nodeArgs.push(deferred.makeNodeResolver());\n            function bound() {\n                return callback.apply(thisp, arguments);\n            }\n            Q(bound).fapply(nodeArgs).fail(deferred.reject);\n            return deferred.promise;\n        };\n    };\n    Promise.prototype.nbind = function() {\n        var args = array_slice(arguments, 0);\n        args.unshift(this);\n        return Q.nbind.apply(void 0, args);\n    };\n    /**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */ Q.nmapply = Q.npost = function(object, name, args) {\n        return Q(object).npost(name, args);\n    };\n    Promise.prototype.nmapply = Promise.prototype.npost = function(name, args) {\n        var nodeArgs = array_slice(args || []);\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        this.dispatch(\"post\", [\n            name,\n            nodeArgs\n        ]).fail(deferred.reject);\n        return deferred.promise;\n    };\n    /**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */ Q.nsend = Q.nmcall = Q.ninvoke = function(object, name /*...args*/ ) {\n        var nodeArgs = array_slice(arguments, 2);\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(object).dispatch(\"post\", [\n            name,\n            nodeArgs\n        ]).fail(deferred.reject);\n        return deferred.promise;\n    };\n    Promise.prototype.nsend = Promise.prototype.nmcall = Promise.prototype.ninvoke = function(name /*...args*/ ) {\n        var nodeArgs = array_slice(arguments, 1);\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        this.dispatch(\"post\", [\n            name,\n            nodeArgs\n        ]).fail(deferred.reject);\n        return deferred.promise;\n    };\n    /**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */ Q.nodeify = nodeify;\n    function nodeify(object, nodeback) {\n        return Q(object).nodeify(nodeback);\n    }\n    Promise.prototype.nodeify = function(nodeback) {\n        if (nodeback) {\n            this.then(function(value) {\n                Q.nextTick(function() {\n                    nodeback(null, value);\n                });\n            }, function(error) {\n                Q.nextTick(function() {\n                    nodeback(error);\n                });\n            });\n        } else {\n            return this;\n        }\n    };\n    Q.noConflict = function() {\n        throw new Error(\"Q.noConflict only works when Q is used as a global\");\n    };\n    // All code before this point will be filtered from stack traces.\n    var qEndingLine = captureLine();\n    return Q;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/q/q.js\n");

/***/ })

};
;